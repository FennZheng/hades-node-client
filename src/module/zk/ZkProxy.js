// Generated by CoffeeScript 1.3.3
(function() {
  var CONFIG_ROOT_PATH, ZkProxy, instance, zkConfig, zookeeper;

  zookeeper = require('node-zookeeper-client');

  zkConfig = require('../setting/config.json');

  CONFIG_ROOT_PATH = "/hades/configs/";

  ZkProxy = (function() {

    function ZkProxy() {
      if (!(config.project != null)) {
        throw new Error("hades-node-client init error: project is null in config.json");
      }
      this._PROJECT_PATH = CONFIG_ROOT_PATH + "/" + config.project;
      this._hostList = zkConfig.hostList;
      this._retries = zkConfig.retries || 3;
      this._sessionTimeout = zkConfig.sessionTimeout || 10000;
      this._client = zookeeper.createClient(this._hostList, {
        retries: this._retries,
        sessionTimeout: this._sessionTimeout
      });
      return;
    }

    ZkProxy.prototype.listChildren = function(client, path) {
      this._client.getChildren(path, function(event) {
        return console.log('Got watcher event: %s', event);
      }, function(error, children, stat) {
        if (error) {
          console.log('Failed to list children of %s due to: %s.', path, error);
          return;
        }
        return console.log('Children of %s are: %j.', path, children);
      });
    };

    ZkProxy.prototype.setConfig = function(name, data) {
      var _path;
      _path = this._buildPath(name);
      if (!this._exist(_path)) {
        this._createPath(_path);
      }
      this._set(_path, data);
    };

    ZkProxy.prototype.getConfig = function(name) {
      var _data, _path;
      _path = this._buildPath(this._buildKey(name));
      _data = null;
      this._client.getData(_path, null, function(error, data, stat) {
        if (error) {
          console.log(error.stack);
          return _data = null;
        } else {
          return _data = data;
        }
      });
      return _data;
    };

    ZkProxy.prototype.getConfigAndWatch = function(name, cb) {
      var _data, _path;
      _path = this._buildPath(this._buildKey(name));
      _data = null;
      this._client.getData(_path, function(event) {
        switch (event.getType) {
          case "NODE_CREATED":
            getConfigAndWatch(name);
            break;
          case "NODE_DELETED":
            cb(name);
            break;
          case "NODE_DATA_CHANGED":
            cb(name, event);
            break;
          case "NODE_CHILDREN_CHANGED":
            cb(null, null);
            break;
          default:
            cb(null, null);
        }
        return this._trasformEvent(event, data, name, cb);
      }, function(error, data, stat) {
        if (error) {
          console.log(error.stack);
          return _data = null;
        } else {
          return _data = data;
        }
      });
      _data;

      return cb(name, value);
    };

    /*
            Event.type:
    	        NODE_CREATED - Watched node is created.
    			NODE_DELETED - watched node is deleted.
    			NODE_DATA_CHANGED - Data of watched node is changed.
    			NODE_CHILDREN_CHANGED - Children of watched node is changed.
    */


    ZkProxy.prototype._trasformEvent = function(event, cb) {
      switch (event.getType) {
        case "NODE_CREATED":
          return cb(event);
        case "NODE_DELETED":
          return cb(name);
        case "NODE_DATA_CHANGED":
          return cb(name, event);
        case "NODE_CHILDREN_CHANGED":
          return cb(null, null);
        default:
          return cb(null, null);
      }
    };

    ZkProxy.prototype._createPath = function(path) {
      return this._client.create(path, function(error) {
        if (error) {
          console.log('Failed to create node: %s due to: %s.', path, error);
        }
        return console.log('Node: %s is successfully created.', path);
      });
    };

    ZkProxy.prototype._set = function(path, data) {
      return this._client.setData(path, null, -1, function(error, stat) {
        if (error) {
          console.log(error.stack);
        }
        return console.log('Data is set at path :%s', path);
      });
    };

    ZkProxy.prototype._exist = function(path) {
      return this._client.exists(path, function(error, stat) {
        if (error) {
          console.log(error.stack);
        }
        if (stat) {
          return true;
        }
        return false;
      });
    };

    ZkProxy.prototype._buildPath = function(name) {
      return this._PROJECT_PATH + "/" + name;
    };

    ZkProxy.prototype._buildKey = function(configName) {
      var _zkKey;
      _zkKey = configName;
      if (configName.slice(-5, -1) === ".json") {
        _zkKey = name.slice(0, -5);
      }
      return _zkKey;
    };

    return ZkProxy;

  })();

  instance = new ZkProxy();

  exports.ZkProxy = instance;

}).call(this);
