// Generated by CoffeeScript 1.3.3
(function() {
  var CONFIG_ROOT_PATH, CountDownLatch, Fiber, RemoteConfigCache, ZkProxy, instance, zkConfig, zookeeper;

  zookeeper = require('node-zookeeper-client');

  zkConfig = require('../../setting/config.json');

  RemoteConfigCache = require('../config/RemoteConfigCache').RemoteConfigCache;

  Fiber = require('fibers');

  CONFIG_ROOT_PATH = "/hades/configs";

  ZkProxy = (function() {

    ZkProxy._loadCompleted = false;

    function ZkProxy() {
      if (!(zkConfig.project != null)) {
        throw new Error("hades-node-client init error: project is null in config.json");
      }
      this._PROJECT_PATH = CONFIG_ROOT_PATH + "/" + zkConfig.project;
      this._hostList = zkConfig.hostList;
      this._retries = zkConfig.retries || 3;
      this._sessionTimeout = zkConfig.sessionTimeout || 10000;
      this._client = zookeeper.createClient(this._hostList, {
        retries: this._retries,
        sessionTimeout: this._sessionTimeout
      });
      return;
    }

    ZkProxy.prototype.checkLoadState = function() {
      return this._loadCompleted && true;
    };

    ZkProxy.prototype.load = function() {
      this._loadCompleted = false;
      this._client.connect();
      return this._client.getChildren(this._PROJECT_PATH, this._initConfigMap.bind(this));
    };

    ZkProxy.prototype._initConfigMap = function(err, children, stats) {
      var child, _countDownLatch, _i, _len, _results;
      if (err) {
        console.log("_initConfigMap error: " + err.stack);
      }
      if (children != null) {
        _countDownLatch = new CountDownLatch(children.length, function() {
          return this._loadCompleted = true;
        });
        _results = [];
        for (_i = 0, _len = children.length; _i < _len; _i++) {
          child = children[_i];
          _results.push(this._loadConfigItem(child, _countDownLatch));
        }
        return _results;
      }
    };

    ZkProxy.prototype._loadConfigItem = function(name, _countDownLatch) {
      var _path;
      _path = this._buildPath(name);
      this._client.getData(_path, null, function(error, data, stat) {
        if (error) {
          console.log(error.stack);
        } else {
          if (data != null) {
            RemoteConfigCache[name] = data.toString("utf-8");
          } else {
            RemoteConfigCache[name] = null;
          }
        }
        _countDownLatch.countDown();
      });
    };

    ZkProxy.prototype._buildPath = function(configName) {
      return this._PROJECT_PATH + "/" + this._buildKey(configName);
    };

    ZkProxy.prototype._buildKey = function(configName) {
      var _zkKey;
      _zkKey = configName;
      if (configName.slice(-5, -1) === ".json") {
        _zkKey = name.slice(0, -5);
      }
      return _zkKey;
    };

    return ZkProxy;

  })();

  instance = new ZkProxy();

  CountDownLatch = (function() {

    function CountDownLatch(count, submit) {
      this._count = count;
      this._submit = submit;
    }

    CountDownLatch.prototype.countDown = function() {
      this._count = this._count(-1);
      if (this._count <= 0) {
        this._submit();
      }
      return this._count;
    };

    return CountDownLatch;

  })();

  exports.ZkProxy = instance;

}).call(this);
