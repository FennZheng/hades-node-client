// Generated by CoffeeScript 1.3.3
(function() {
  var CONFIG_ROOT_PATH, ConfigMap, ZkProxy, instance, zkConfig, zookeeper;

  zookeeper = require('node-zookeeper-client');

  zkConfig = require('../../setting/config.json');

  ConfigMap = require('./RemoteConfigStore').ConfigMap;

  CONFIG_ROOT_PATH = "/hades/configs";

  ZkProxy = (function() {

    function ZkProxy() {
      if (!(zkConfig.project != null)) {
        throw new Error("hades-node-client init error: project is null in config.json");
      }
      this._PROJECT_PATH = CONFIG_ROOT_PATH + "/" + zkConfig.project;
      this._hostList = zkConfig.hostList;
      this._retries = zkConfig.retries || 3;
      this._sessionTimeout = zkConfig.sessionTimeout || 10000;
      this._client = zookeeper.createClient(this._hostList, {
        retries: this._retries,
        sessionTimeout: this._sessionTimeout
      });
      this._client.connect();
      return;
    }

    ZkProxy.prototype._setConfig = function(name, data) {
      var _path;
      _path = this._buildPath(name);
      if (!this._exist(_path)) {
        this._createPath(_path);
      }
      this._set(_path, data);
    };

    ZkProxy.prototype.getConfig = function(name) {
      var _path;
      _path = this._buildPath(name);
      console.log("getConfig name:" + name + " ,path:" + _path);
      return this._client.getData(_path, null, function(error, data, stat) {
        if (error) {
          return console.log(error.stack);
        } else {
          if (data != null) {
            return cb(name, data.toString("utf-8"));
          } else {
            return cb(name, null);
          }
        }
      });
    };

    ZkProxy.prototype.getConfigAndWatch = function(name) {
      var _path;
      _path = this._buildPath(name);
      console.log("getConfigAndWatch name:" + name + " ,path:" + _path);
      return this._client.getData(_path, function(event) {
        console.log("receive event:" + zookeeper.Event.NODE_DATA_CHANGED);
        switch (event.getType) {
          case zookeeper.Event.NODE_DATA_CHANGED:
            return _getDataAndNotify(path, name);
          default:
            return console.log("path " + (event.getPath()) + " changed: " + (event.getType()));
        }
      }, function(error, data, stat) {
        if (error) {
          return console.log(error.stack);
        } else {
          if (data != null) {
            return cb(name, data.toString("utf-8"));
          } else {
            return cb(name, null);
          }
        }
      });
    };

    ZkProxy.prototype.getConfig = function(name) {
      var _path;
      _path = this._buildPath(name);
      console.log("getConfig name:" + name + " ,path:" + _path);
      return this._client.getData(_path, null, function(error, data, stat) {
        if (error) {
          return console.log(error.stack);
        } else {
          if (data != null) {
            return cb(name, data.toString("utf-8"));
          } else {
            return cb(name, null);
          }
        }
      });
    };

    ZkProxy.prototype.getConfigAndWatch = function(name) {
      var _path;
      _path = this._buildPath(name);
      console.log("getConfigAndWatch name:" + name + " ,path:" + _path);
      return this._client.getData(_path, function(event) {
        console.log("receive event:" + zookeeper.Event.NODE_DATA_CHANGED);
        switch (event.getType) {
          case zookeeper.Event.NODE_DATA_CHANGED:
            return _getDataAndNotify(path, name);
          default:
            return console.log("path " + (event.getPath()) + " changed: " + (event.getType()));
        }
      }, function(error, data, stat) {
        if (error) {
          return console.log(error.stack);
        } else {
          if (data != null) {
            return cb(name, data.toString("utf-8"));
          } else {
            return cb(name, null);
          }
        }
      });
    };

    ZkProxy.prototype._getDataAndNotify = function(path, cb) {
      var _name;
      _name = this._getConfigName(path);
      return this._client.getData(path, function(err, data, stat) {
        if (error) {
          return console.log("get data error when data changed :" + err.stack);
        } else {
          if (data != null) {
            return cb(_name, data.toString("utf-8"));
          } else {
            return cb(_name, null);
          }
        }
      });
    };

    ZkProxy.prototype._createPath = function(path) {
      return this._client.create(path, function(error) {
        if (error) {
          console.log('Failed to create node: %s due to: %s.', path, error);
        }
        return console.log('Node: %s is successfully created.', path);
      });
    };

    ZkProxy.prototype._set = function(path, data) {
      return this._client.setData(path, null, -1, function(error, stat) {
        if (error) {
          console.log(error.stack);
        }
        return console.log('Data is set at path :%s', path);
      });
    };

    ZkProxy.prototype._exist = function(path) {
      return this._client.exists(path, function(error, stat) {
        if (error) {
          console.log(error.stack);
        }
        if (stat) {
          return true;
        }
        return false;
      });
    };

    ZkProxy.prototype._buildPath = function(configName) {
      return this._PROJECT_PATH + "/" + this._buildKey(configName);
    };

    ZkProxy.prototype._buildKey = function(configName) {
      var _zkKey;
      _zkKey = configName;
      if (configName.slice(-5, -1) === ".json") {
        _zkKey = name.slice(0, -5);
      }
      return _zkKey;
    };

    ZkProxy.prototype._getConfigName = function(path) {
      return path.replace(this._PROJECT_PATH + "/", "");
    };

    return ZkProxy;

  })();

  instance = new ZkProxy();

  exports.ZkProxy = instance;

}).call(this);
