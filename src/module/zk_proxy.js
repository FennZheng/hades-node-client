// Generated by CoffeeScript 1.3.3
(function() {
  var CONFIG_ROOT_PATH, ZkProxy, instance, zkConfig, zookeeper;

  zookeeper = require('node-zookeeper-client');

  zkConfig = require('../setting/config.json');

  CONFIG_ROOT_PATH = "/hades/configs/";

  ZkProxy = (function() {

    function ZkProxy() {
      if (!(config.project != null)) {
        throw new Error("hades-node-client init error: project is null in config.json");
      }
      this._PROJECT_PATH = CONFIG_ROOT_PATH + "/" + config.project;
      this._hostList = zkConfig.hostList;
      this._retries = zkConfig.retries || 3;
      this._sessionTimeout = zkConfig.sessionTimeout || 10000;
      this._client = zookeeper.createClient(this._hostList, {
        retries: this._retries,
        sessionTimeout: this._sessionTimeout
      });
      return;
    }

    ZkProxy.prototype.listChildren = function(client, path) {
      this._client.getChildren(path, function(event) {
        console.log('Got watcher event: %s', event);
        return listChildren(client, path);
      }, function(error, children, stat) {
        if (error) {
          console.log('Failed to list children of %s due to: %s.', path, error);
          return;
        }
        return console.log('Children of %s are: %j.', path, children);
      });
    };

    ZkProxy.prototype.setConfig = function(name, data) {
      var path;
      path = this._buildPath(name);
      if (!this._exist(path)) {
        this._createPath(path);
      }
      this._set(path, data);
    };

    ZkProxy.prototype.getConfig = function(name) {
      var path;
      path = this._buildPath(name);
      return this._client.getData(path, function(error, data, stat) {
        if (error) {
          console.log(error.stack);
          return null;
        }
        return data;
      });
    };

    ZkProxy.prototype._createPath = function(path) {
      return this._client.create(path, function(error) {
        if (error) {
          console.log('Failed to create node: %s due to: %s.', path, error);
        }
        return console.log('Node: %s is successfully created.', path);
      });
    };

    ZkProxy.prototype._set = function(path, data) {
      return this._client.setData(path, null, -1, function(error, stat) {
        if (error) {
          console.log(error.stack);
        }
        return console.log('Data is set at path :%s', path);
      });
    };

    ZkProxy.prototype._exist = function(path) {
      return this._client.exists(path, function(error, stat) {
        if (error) {
          console.log(error.stack);
        }
        if (stat) {
          return true;
        }
        return false;
      });
    };

    ZkProxy.prototype._buildPath = function(name) {
      return this._PROJECT_PATH + "/" + name;
    };

    return ZkProxy;

  })();

  instance = new ZkProxy();

  exports.ZkProxy = instance;

}).call(this);
